// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.String
  access_token       String? @db.String
  oauth_token        String? @db.String
  oauth_token_secret String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  name                String?
  email               String?               @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  available_credit    Int?                  @default(111)
  Characters          Characters[]
  GeneratedCharacters GeneratedCharacters[]
  SessionImages       SessionImages[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// model CharacterDetails {
//   id           String      @id @default(auto()) @map("_id") @db.ObjectId
//   secure_url   String
//   public_id    String
//   Characters   Characters? @relation(fields: [charactersId], references: [id])
//   charactersId String?     @db.ObjectId
// }

model Characters {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  name    String @unique
  species String
  breed   String
  images  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GeneratedCharacters {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  model_name    String
  style_name    String
  is_favorite   Boolean   @default(false)
  favorite_time DateTime? @default(now())
  image_url     String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OurPicks {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  style_name String
  image_url  String
  public_id  String
}

model AiModel {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  model_name String
  public_id  String
  image_url  String
}

model FavouriteCharacter {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  public_id     String
  url           String
  favorite_time DateTime? @default(now())
  user_id       String
}

model SessionImages {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  images_base_64 String[]
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
